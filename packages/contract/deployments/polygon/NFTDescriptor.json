{
  "address": "0x952cAA248A74BbB38F54883a3CD87b3A74B4a57D",
  "abi": [],
  "transactionHash": "0xd8c23fd22ea9e2be4fa4703e71290a46741eb7dc5823d08808ec47adebbcb351",
  "receipt": {
    "to": null,
    "from": "0x1dedC5a1A69c7Cc87CAD36863C7A615960E6B1cd",
    "contractAddress": "0x952cAA248A74BbB38F54883a3CD87b3A74B4a57D",
    "transactionIndex": 26,
    "gasUsed": "1760974",
    "logsBloom": "0x
    "blockHash": "0x726295d30512af4357f1c7cde242dabc763f5b571ba8a22a5c09b9b61656cefc",
    "transactionHash": "0xd8c23fd22ea9e2be4fa4703e71290a46741eb7dc5823d08808ec47adebbcb351",
    "logs": [
      {
        "transactionIndex": 26,
        "blockNumber": 24734456,
        "transactionHash": "0xd8c23fd22ea9e2be4fa4703e71290a46741eb7dc5823d08808ec47adebbcb351",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000001dedc5a1a69c7cc87cad36863c7a615960e6b1cd",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000af2cb3de68c6b600000000000000000000000000000000000000000000000029a2241af62c0000000000000000000000000000000000000000000000000fcfc119a222e5904dfb00000000000000000000000000000000000000000000000028f2f76717c3394a000000000000000000000000000000000000000000000fcfc1c8ced6c3f914b1",
        "logIndex": 143,
        "blockHash": "0x726295d30512af4357f1c7cde242dabc763f5b571ba8a22a5c09b9b61656cefc"
      }
    ],
    "blockNumber": 24734456,
    "cumulativeGasUsed": "7330553",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8a2fa79cc19f1a1cb7440b904874cbdc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructTokenURI(NFTDescriptor.TokenURIParams,string[] storage)\":{\"notice\":\"Construct an ERC721 token URI.\"},\"generateSVGImage(MultiPartRLEToSVG.SVGParams,string[] storage)\":{\"notice\":\"Generate an SVG image for use in the ERC721 token URI.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTDescriptor.sol\":\"NFTDescriptor\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"contracts/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n  string internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n  function encode(bytes memory data) internal pure returns (string memory) {\\n    if (data.length == 0) return \\\"\\\";\\n\\n    // load the table into memory\\n    string memory table = TABLE;\\n\\n    // multiply by 4/3 rounded up\\n    uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n    // add some extra buffer at the end required for the writing\\n    string memory result = new string(encodedLen + 32);\\n\\n    assembly {\\n      // set the actual output length\\n      mstore(result, encodedLen)\\n\\n      // prepare the lookup table\\n      let tablePtr := add(table, 1)\\n\\n      // input ptr\\n      let dataPtr := data\\n      let endPtr := add(dataPtr, mload(data))\\n\\n      // result ptr, jump over length\\n      let resultPtr := add(result, 32)\\n\\n      // run over the input, 3 bytes at a time\\n      for {\\n\\n      } lt(dataPtr, endPtr) {\\n\\n      } {\\n        dataPtr := add(dataPtr, 3)\\n\\n        // read 3 bytes\\n        let input := mload(dataPtr)\\n\\n        // write 4 characters\\n        mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n        resultPtr := add(resultPtr, 1)\\n        mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n        resultPtr := add(resultPtr, 1)\\n        mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\n        resultPtr := add(resultPtr, 1)\\n        mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\\n        resultPtr := add(resultPtr, 1)\\n      }\\n\\n      // padding with '='\\n      switch mod(mload(data), 3)\\n      case 1 {\\n        mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n      }\\n      case 2 {\\n        mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x88eafa9d16034ae3422ec03884f87d00af6b192ad76d3eb6e6bd419e7a02bf6d\",\"license\":\"MIT\"},\"contracts/MultiPartRLEToSVG.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title A library used to convert multi-part RLE compressed images to SVG\\n\\npragma solidity ^0.8.6;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary MultiPartRLEToSVG {\\n  using Strings for uint256;\\n  struct SVGParams {\\n    bytes parts;\\n    string background;\\n  }\\n\\n  struct ContentBounds {\\n    uint8 top;\\n    uint8 right;\\n    uint8 bottom;\\n    uint8 left;\\n  }\\n\\n  struct Rect {\\n    uint8 length;\\n    uint8 colorIndex;\\n  }\\n\\n  struct DecodedImage {\\n    ContentBounds bounds;\\n    uint256 width;\\n    Rect[] rects;\\n  }\\n\\n  /**\\n   * @notice Given RLE image parts and color palettes, merge to generate a single SVG image.\\n   */\\n  function generateSVG(SVGParams memory params, string[] storage palette) internal view returns (string memory svg) {\\n    // prettier-ignore\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<svg width=\\\"320\\\" height=\\\"320\\\" viewBox=\\\"0 0 320 320\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" shape-rendering=\\\"crispEdges\\\">',\\n          // '<rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#',\\n          // params.background,\\n          // '\\\" />',\\n          _generateSVGRects(params, palette),\\n          \\\"</svg>\\\"\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @notice Given RLE image parts and color palettes, generate SVG rects.\\n   */\\n  // prettier-ignore\\n  function _generateSVGRects(SVGParams memory params, string[] storage palette)\\n        private\\n        view\\n        returns (string memory svg)\\n    {\\n        string[33] memory lookup = [\\n            \\\"0\\\", \\\"10\\\", \\\"20\\\", \\\"30\\\", \\\"40\\\", \\\"50\\\", \\\"60\\\", \\\"70\\\", \\n            \\\"80\\\", \\\"90\\\", \\\"100\\\", \\\"110\\\", \\\"120\\\", \\\"130\\\", \\\"140\\\", \\\"150\\\", \\n            \\\"160\\\", \\\"170\\\", \\\"180\\\", \\\"190\\\", \\\"200\\\", \\\"210\\\", \\\"220\\\", \\\"230\\\", \\n            \\\"240\\\", \\\"250\\\", \\\"260\\\", \\\"270\\\", \\\"280\\\", \\\"290\\\", \\\"300\\\", \\\"310\\\",\\n            \\\"320\\\" \\n        ];\\n        string memory rects;\\n        DecodedImage memory image = _decodeRLEImage(params.parts);\\n        uint256 currentX = image.bounds.left;\\n        uint256 currentY = image.bounds.top;\\n        string[4] memory buffer;\\n        string memory part;\\n\\n        for (uint256 i = 0; i < image.rects.length; i++) {\\n            Rect memory rect = image.rects[i];\\n            if (rect.colorIndex != 0) {\\n                buffer[0] = lookup[rect.length];      // width\\n                buffer[1] = lookup[currentX];         // x\\n                buffer[2] = lookup[currentY];         // y\\n                buffer[3] = palette[rect.colorIndex - 1]; // color\\n\\n                part = string(abi.encodePacked(part, _getChunk(buffer)));\\n            }\\n\\n            currentX += rect.length;\\n            if (currentX - image.bounds.left == image.width) {\\n                currentX = image.bounds.left;\\n                currentY++;\\n            }\\n        }\\n        rects = string(abi.encodePacked(rects, part));\\n        return rects;\\n    }\\n\\n  /**\\n   * @notice Return a string that consists of all rects in the provided `buffer`.\\n   */\\n  function _getChunk(string[4] memory buffer) private pure returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<rect width=\\\"',\\n          buffer[0],\\n          '\\\" height=\\\"10\\\" x=\\\"',\\n          buffer[1],\\n          '\\\" y=\\\"',\\n          buffer[2],\\n          '\\\" fill=\\\"#',\\n          buffer[3],\\n          '\\\" />'\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @notice Decode a single RLE compressed image into a `DecodedImage`.\\n   */\\n  function _decodeRLEImage(bytes memory image) private pure returns (DecodedImage memory) {\\n    ContentBounds memory bounds = ContentBounds({\\n      top: uint8(image[1]),\\n      right: uint8(image[2]),\\n      bottom: uint8(image[3]),\\n      left: uint8(image[4])\\n    });\\n    uint256 width = bounds.right - bounds.left;\\n\\n    uint256 cursor;\\n    Rect[] memory rects = new Rect[]((image.length - 5) / 2);\\n\\n    for (uint256 i = 5; i < image.length; i += 2) {\\n      rects[cursor] = Rect({length: uint8(image[i]), colorIndex: uint8(image[i + 1])});\\n\\n      cursor++;\\n    }\\n    return DecodedImage({bounds: bounds, width: width, rects: rects});\\n  }\\n}\\n\",\"keccak256\":\"0xa5607b78c9b2c7a927a442a7b12f9c1ba85e16f880845dcab05859d808798ff8\",\"license\":\"GPL-3.0\"},\"contracts/NFTDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title A library used to construct ERC721 token URIs and SVG images\\n\\npragma solidity ^0.8.6;\\n\\nimport {Base64} from \\\"./Base64.sol\\\";\\nimport {MultiPartRLEToSVG} from \\\"./MultiPartRLEToSVG.sol\\\";\\n\\nlibrary NFTDescriptor {\\n  struct TokenURIParams {\\n    string name;\\n    string description;\\n    bytes parts;\\n  }\\n\\n  /**\\n   * @notice Construct an ERC721 token URI.\\n   */\\n  function constructTokenURI(TokenURIParams memory params, string[] storage palette)\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    string memory image = generateSVGImage(\\n      MultiPartRLEToSVG.SVGParams({parts: params.parts, background: palette[0]}),\\n      palette\\n    );\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:application/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              abi.encodePacked(\\n                '{\\\"name\\\":\\\"',\\n                params.name,\\n                '\\\", \\\"description\\\":\\\"',\\n                params.description,\\n                '\\\", \\\"image\\\": \\\"',\\n                \\\"data:image/svg+xml;base64,\\\",\\n                image,\\n                '\\\"}'\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @notice Generate an SVG image for use in the ERC721 token URI.\\n   */\\n  function generateSVGImage(MultiPartRLEToSVG.SVGParams memory params, string[] storage palette)\\n    public\\n    view\\n    returns (string memory svg)\\n  {\\n    return Base64.encode(bytes(MultiPartRLEToSVG.generateSVG(params, palette)));\\n  }\\n}\\n\",\"keccak256\":\"0xecb6e485ac040690b5e860bbbafeadfaf92845a32029e6701ff81af16e03ed3e\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x611f2c610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80636c2a0e3c14610045578063a94e2b1014610075575b600080fd5b61005f600480360381019061005a91906113f9565b6100a5565b60405161006c91906117d6565b60405180910390f35b61008f600480360381019061008a919061139d565b6101cf565b60405161009c91906117d6565b60405180910390f35b60606000610171604051806040016040528086604001518152602001856000815481106100d5576100d4611b8b565b5b9060005260206000200180546100ea90611a52565b80601f016020809104026020016040519081016040528092919081815260200182805461011690611a52565b80156101635780601f1061013857610100808354040283529160200191610163565b820191906000526020600020905b81548152906001019060200180831161014657829003601f168201915b5050505050815250846101cf565b90506101a78460000151856020015183604051602001610193939291906116aa565b6040516020818303038152906040526101eb565b6040516020016101b79190611712565b60405160208183030381529060405291505092915050565b60606101e36101de8484610370565b6101eb565b905092915050565b606060008251141561020e5760405180602001604052806000815250905061036b565b6000604051806060016040528060408152602001611eb7604091399050600060036002855161023d91906118a6565b61024791906118fc565b6004610253919061192d565b9050600060208261026491906118a6565b67ffffffffffffffff81111561027d5761027c611bba565b5b6040519080825280601f01601f1916602001820160405280156102af5781602001600182028036833780820191505090505b509050818152600183018586518101602084015b8183101561032a576003830192508251603f8160121c1685015160f81b8252600182019150603f81600c1c1685015160f81b8252600182019150603f8160061c1685015160f81b8252600182019150603f811685015160f81b8252600182019150506102c3565b60038951066001811461034457600281146103545761035f565b613d3d60f01b600283035261035f565b603d60f81b60018303525b50505050508093505050505b919050565b606061037c83836103a3565b60405160200161038c9190611734565b604051602081830303815290604052905092915050565b606060006040518061042001604052806040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600281526020017f313000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600281526020017f323000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600281526020017f333000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600281526020017f343000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600281526020017f353000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600281526020017f363000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600281526020017f373000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600281526020017f383000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600281526020017f393000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f313030000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f313130000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f313230000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f313330000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f313430000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f313530000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f313630000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f313730000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f313830000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f313930000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f323030000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f323130000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f323230000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f323330000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f323430000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f323530000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f323630000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f323730000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f323830000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f323930000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f333030000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f333130000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f3332300000000000000000000000000000000000000000000000000000000000815250815250905060606000610b5f8660000151610e0f565b9050600081600001516060015160ff169050600082600001516000015160ff169050610b896110c6565b606060005b856040015151811015610dda57600086604001518281518110610bb457610bb3611b8b565b5b602002602001015190506000816020015160ff1614610d725788816000015160ff1660218110610be757610be6611b8b565b5b602002015184600060048110610c0057610bff611b8b565b5b6020020181905250888660218110610c1b57610c1a611b8b565b5b602002015184600160048110610c3457610c33611b8b565b5b6020020181905250888560218110610c4f57610c4e611b8b565b5b602002015184600260048110610c6857610c67611b8b565b5b60200201819052508a60018260200151610c8291906119bb565b60ff1681548110610c9657610c95611b8b565b5b906000526020600020018054610cab90611a52565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd790611a52565b8015610d245780601f10610cf957610100808354040283529160200191610d24565b820191906000526020600020905b815481529060010190602001808311610d0757829003601f168201915b505050505084600360048110610d3d57610d3c611b8b565b5b602002018190525082610d4f85611037565b604051602001610d60929190611686565b60405160208183030381529060405292505b806000015160ff1686610d8591906118a6565b9550866020015187600001516060015160ff1687610da39190611987565b1415610dc65786600001516060015160ff1695508480610dc290611ab5565b9550505b508080610dd290611ab5565b915050610b8e565b508581604051602001610dee929190611686565b60405160208183030381529060405295508597505050505050505092915050565b610e176110ed565b6000604051806080016040528084600181518110610e3857610e37611b8b565b5b602001015160f81c60f81b60f81c60ff16815260200184600281518110610e6257610e61611b8b565b5b602001015160f81c60f81b60f81c60ff16815260200184600381518110610e8c57610e8b611b8b565b5b602001015160f81c60f81b60f81c60ff16815260200184600481518110610eb657610eb5611b8b565b5b602001015160f81c60f81b60f81c60ff168152509050600081606001518260200151610ee291906119bb565b60ff169050600080600260058751610efa9190611987565b610f0491906118fc565b67ffffffffffffffff811115610f1d57610f1c611bba565b5b604051908082528060200260200182016040528015610f5657816020015b610f43611114565b815260200190600190039081610f3b5790505b5090506000600590505b8651811015611010576040518060400160405280888381518110610f8757610f86611b8b565b5b602001015160f81c60f81b60f81c60ff16815260200188600184610fab91906118a6565b81518110610fbc57610fbb611b8b565b5b602001015160f81c60f81b60f81c60ff16815250828481518110610fe357610fe2611b8b565b5b60200260200101819052508280610ff990611ab5565b93505060028161100991906118a6565b9050610f60565b50604051806060016040528085815260200184815260200182815250945050505050919050565b60608160006004811061104d5761104c611b8b565b5b60200201518260016004811061106657611065611b8b565b5b60200201518360026004811061107f5761107e611b8b565b5b60200201518460036004811061109857611097611b8b565b5b60200201516040516020016110b09493929190611761565b6040516020818303038152906040529050919050565b60405180608001604052806004905b60608152602001906001900390816110d55790505090565b6040518060600160405280611100611134565b815260200160008152602001606081525090565b6040518060400160405280600060ff168152602001600060ff1681525090565b6040518060800160405280600060ff168152602001600060ff168152602001600060ff168152602001600060ff1681525090565b600061117b6111768461181d565b6117f8565b90508281526020810184848401111561119757611196611bf8565b5b6111a2848285611a10565b509392505050565b60006111bd6111b88461184e565b6117f8565b9050828152602081018484840111156111d9576111d8611bf8565b5b6111e4848285611a10565b509392505050565b6000813590506111fb81611e9f565b92915050565b600082601f83011261121657611215611be9565b5b8135611226848260208601611168565b91505092915050565b600082601f83011261124457611243611be9565b5b81356112548482602086016111aa565b91505092915050565b60006040828403121561127357611272611bee565b5b61127d60406117f8565b9050600082013567ffffffffffffffff81111561129d5761129c611bf3565b5b6112a984828501611201565b600083015250602082013567ffffffffffffffff8111156112cd576112cc611bf3565b5b6112d98482850161122f565b60208301525092915050565b6000606082840312156112fb576112fa611bee565b5b61130560606117f8565b9050600082013567ffffffffffffffff81111561132557611324611bf3565b5b6113318482850161122f565b600083015250602082013567ffffffffffffffff81111561135557611354611bf3565b5b6113618482850161122f565b602083015250604082013567ffffffffffffffff81111561138557611384611bf3565b5b61139184828501611201565b60408301525092915050565b600080604083850312156113b4576113b3611c02565b5b600083013567ffffffffffffffff8111156113d2576113d1611bfd565b5b6113de8582860161125d565b92505060206113ef858286016111ec565b9150509250929050565b600080604083850312156114105761140f611c02565b5b600083013567ffffffffffffffff81111561142e5761142d611bfd565b5b61143a858286016112e5565b925050602061144b858286016111ec565b9150509250929050565b60006114608261187f565b61146a818561188a565b935061147a818560208601611a1f565b61148381611c07565b840191505092915050565b60006114998261187f565b6114a3818561189b565b93506114b3818560208601611a1f565b80840191505092915050565b60006114cc60098361189b565b91506114d782611c18565b600982019050919050565b60006114ef60098361189b565b91506114fa82611c41565b600982019050919050565b600061151260048361189b565b915061151d82611c6a565b600482019050919050565b600061153560028361189b565b915061154082611c93565b600282019050919050565b6000611558600d8361189b565b915061156382611cbc565b600d82019050919050565b600061157b60128361189b565b915061158682611ce5565b601282019050919050565b600061159e601d8361189b565b91506115a982611d0e565b601d82019050919050565b60006115c160058361189b565b91506115cc82611d37565b600582019050919050565b60006115e460118361189b565b91506115ef82611d60565b601182019050919050565b600061160760748361189b565b915061161282611d89565b607482019050919050565b600061162a600d8361189b565b915061163582611e24565b600d82019050919050565b600061164d60068361189b565b915061165882611e4d565b600682019050919050565b6000611670601a8361189b565b915061167b82611e76565b601a82019050919050565b6000611692828561148e565b915061169e828461148e565b91508190509392505050565b60006116b5826114e2565b91506116c1828661148e565b91506116cc8261156e565b91506116d8828561148e565b91506116e38261154b565b91506116ee82611663565b91506116fa828461148e565b915061170582611528565b9150819050949350505050565b600061171d82611591565b9150611729828461148e565b915081905092915050565b600061173f826115fa565b915061174b828461148e565b915061175682611640565b915081905092915050565b600061176c8261161d565b9150611778828761148e565b9150611783826115d7565b915061178f828661148e565b915061179a826115b4565b91506117a6828561148e565b91506117b1826114bf565b91506117bd828461148e565b91506117c882611505565b915081905095945050505050565b600060208201905081810360008301526117f08184611455565b905092915050565b6000611802611813565b905061180e8282611a84565b919050565b6000604051905090565b600067ffffffffffffffff82111561183857611837611bba565b5b61184182611c07565b9050602081019050919050565b600067ffffffffffffffff82111561186957611868611bba565b5b61187282611c07565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006118b1826119f9565b91506118bc836119f9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156118f1576118f0611afe565b5b828201905092915050565b6000611907826119f9565b9150611912836119f9565b92508261192257611921611b2d565b5b828204905092915050565b6000611938826119f9565b9150611943836119f9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561197c5761197b611afe565b5b828202905092915050565b6000611992826119f9565b915061199d836119f9565b9250828210156119b0576119af611afe565b5b828203905092915050565b60006119c682611a03565b91506119d183611a03565b9250828210156119e4576119e3611afe565b5b828203905092915050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015611a3d578082015181840152602081019050611a22565b83811115611a4c576000848401525b50505050565b60006002820490506001821680611a6a57607f821691505b60208210811415611a7e57611a7d611b5c565b5b50919050565b611a8d82611c07565b810181811067ffffffffffffffff82111715611aac57611aab611bba565b5b80604052505050565b6000611ac0826119f9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611af357611af2611afe565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f222066696c6c3d22230000000000000000000000000000000000000000000000600082015250565b7f7b226e616d65223a220000000000000000000000000000000000000000000000600082015250565b7f22202f3e00000000000000000000000000000000000000000000000000000000600082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f222c2022696d616765223a202200000000000000000000000000000000000000600082015250565b7f222c20226465736372697074696f6e223a220000000000000000000000000000600082015250565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b7f2220793d22000000000000000000000000000000000000000000000000000000600082015250565b7f22206865696768743d2231302220783d22000000000000000000000000000000600082015250565b7f3c7376672077696474683d2233323022206865696768743d223332302220766960008201527f6577426f783d2230203020333230203332302220786d6c6e733d22687474703a60208201527f2f2f7777772e77332e6f72672f323030302f737667222073686170652d72656e60408201527f646572696e673d2263726973704564676573223e000000000000000000000000606082015250565b7f3c726563742077696474683d2200000000000000000000000000000000000000600082015250565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000600082015250565b611ea8816119ef565b8114611eb357600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220d663bd7f9a9b053640ed7f6157012e960e55e2a00afd7824a6265112d18fe8ac64736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructTokenURI(NFTDescriptor.TokenURIParams,string[] storage)": {
        "notice": "Construct an ERC721 token URI."
      },
      "generateSVGImage(MultiPartRLEToSVG.SVGParams,string[] storage)": {
        "notice": "Generate an SVG image for use in the ERC721 token URI."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}