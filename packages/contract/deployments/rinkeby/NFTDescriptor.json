{
  "address": "0x4F9D47bA2c7117bfdda70F54CEE6a44DE569EF6D",
  "abi": [],
  "transactionHash": "0x659f8d75a2c9cb957d31684287c0a82b8ea5bf656641c7677529678d171f2358",
  "receipt": {
    "to": null,
    "from": "0x6a84E19A4801E5F003ea9d3202a38AE6a864DfdC",
    "contractAddress": "0x4F9D47bA2c7117bfdda70F54CEE6a44DE569EF6D",
    "transactionIndex": 6,
    "gasUsed": "1831412",
    "logsBloom": "0x
    "blockHash": "0xd78157c3707530509a37bb142b96da766951fe91c690dd1028522285106c5eb5",
    "transactionHash": "0x659f8d75a2c9cb957d31684287c0a82b8ea5bf656641c7677529678d171f2358",
    "logs": [],
    "blockNumber": 10238417,
    "cumulativeGasUsed": "7266405",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "dc1df35d524b48052145913ab3bb9c74",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructTokenURI(NFTDescriptor.TokenURIParams,string[] storage)\":{\"notice\":\"Construct an ERC721 token URI.\"},\"generateSVGImage(MultiPartRLEToSVG.SVGParams,string[] storage)\":{\"notice\":\"Generate an SVG image for use in the ERC721 token URI.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTDescriptor.sol\":\"NFTDescriptor\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"contracts/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n  string internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n  function encode(bytes memory data) internal pure returns (string memory) {\\n    if (data.length == 0) return \\\"\\\";\\n\\n    // load the table into memory\\n    string memory table = TABLE;\\n\\n    // multiply by 4/3 rounded up\\n    uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n    // add some extra buffer at the end required for the writing\\n    string memory result = new string(encodedLen + 32);\\n\\n    assembly {\\n      // set the actual output length\\n      mstore(result, encodedLen)\\n\\n      // prepare the lookup table\\n      let tablePtr := add(table, 1)\\n\\n      // input ptr\\n      let dataPtr := data\\n      let endPtr := add(dataPtr, mload(data))\\n\\n      // result ptr, jump over length\\n      let resultPtr := add(result, 32)\\n\\n      // run over the input, 3 bytes at a time\\n      for {\\n\\n      } lt(dataPtr, endPtr) {\\n\\n      } {\\n        dataPtr := add(dataPtr, 3)\\n\\n        // read 3 bytes\\n        let input := mload(dataPtr)\\n\\n        // write 4 characters\\n        mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n        resultPtr := add(resultPtr, 1)\\n        mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n        resultPtr := add(resultPtr, 1)\\n        mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F)))))\\n        resultPtr := add(resultPtr, 1)\\n        mstore(resultPtr, shl(248, mload(add(tablePtr, and(input, 0x3F)))))\\n        resultPtr := add(resultPtr, 1)\\n      }\\n\\n      // padding with '='\\n      switch mod(mload(data), 3)\\n      case 1 {\\n        mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n      }\\n      case 2 {\\n        mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x88eafa9d16034ae3422ec03884f87d00af6b192ad76d3eb6e6bd419e7a02bf6d\",\"license\":\"MIT\"},\"contracts/MultiPartRLEToSVG.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title A library used to convert multi-part RLE compressed images to SVG\\n\\npragma solidity ^0.8.6;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary MultiPartRLEToSVG {\\n  using Strings for uint256;\\n  struct SVGParams {\\n    bytes parts;\\n    string background;\\n  }\\n\\n  struct ContentBounds {\\n    uint8 top;\\n    uint8 right;\\n    uint8 bottom;\\n    uint8 left;\\n  }\\n\\n  struct Rect {\\n    uint8 length;\\n    uint8 colorIndex;\\n  }\\n\\n  struct DecodedImage {\\n    ContentBounds bounds;\\n    uint256 width;\\n    Rect[] rects;\\n  }\\n\\n  /**\\n   * @notice Given RLE image parts and color palettes, merge to generate a single SVG image.\\n   */\\n  function generateSVG(SVGParams memory params, string[] storage palette) internal view returns (string memory svg) {\\n    // prettier-ignore\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<svg width=\\\"320\\\" height=\\\"320\\\" viewBox=\\\"0 0 320 320\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" shape-rendering=\\\"crispEdges\\\">',\\n          '<rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#',\\n          palette[0],\\n          '\\\" />',\\n          _generateSVGRects(params, palette),\\n          \\\"</svg>\\\"\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @notice Given RLE image parts and color palettes, generate SVG rects.\\n   */\\n  // prettier-ignore\\n  function _generateSVGRects(SVGParams memory params, string[] storage palette)\\n        private\\n        view\\n        returns (string memory svg)\\n    {\\n        string[33] memory lookup = [\\n            \\\"0\\\", \\\"10\\\", \\\"20\\\", \\\"30\\\", \\\"40\\\", \\\"50\\\", \\\"60\\\", \\\"70\\\", \\n            \\\"80\\\", \\\"90\\\", \\\"100\\\", \\\"110\\\", \\\"120\\\", \\\"130\\\", \\\"140\\\", \\\"150\\\", \\n            \\\"160\\\", \\\"170\\\", \\\"180\\\", \\\"190\\\", \\\"200\\\", \\\"210\\\", \\\"220\\\", \\\"230\\\", \\n            \\\"240\\\", \\\"250\\\", \\\"260\\\", \\\"270\\\", \\\"280\\\", \\\"290\\\", \\\"300\\\", \\\"310\\\",\\n            \\\"320\\\" \\n        ];\\n        string memory rects;\\n        DecodedImage memory image = _decodeRLEImage(params.parts);\\n        uint256 currentX = image.bounds.left;\\n        uint256 currentY = image.bounds.top;\\n        string[4] memory buffer;\\n        string memory part;\\n\\n        for (uint256 i = 0; i < image.rects.length; i++) {\\n            Rect memory rect = image.rects[i];\\n            if (rect.colorIndex != 0) {\\n                buffer[0] = lookup[rect.length];      // width\\n                buffer[1] = lookup[currentX];         // x\\n                buffer[2] = lookup[currentY];         // y\\n                buffer[3] = palette[rect.colorIndex - 1]; // color\\n\\n                part = string(abi.encodePacked(part, _getChunk(buffer)));\\n            }\\n\\n            currentX += rect.length;\\n            if (currentX - image.bounds.left == image.width) {\\n                currentX = image.bounds.left;\\n                currentY++;\\n            }\\n        }\\n        rects = string(abi.encodePacked(rects, part));\\n        return rects;\\n    }\\n\\n  /**\\n   * @notice Return a string that consists of all rects in the provided `buffer`.\\n   */\\n  function _getChunk(string[4] memory buffer) private pure returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<rect width=\\\"',\\n          buffer[0],\\n          '\\\" height=\\\"10\\\" x=\\\"',\\n          buffer[1],\\n          '\\\" y=\\\"',\\n          buffer[2],\\n          '\\\" fill=\\\"#',\\n          buffer[3],\\n          '\\\" />'\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @notice Decode a single RLE compressed image into a `DecodedImage`.\\n   */\\n  function _decodeRLEImage(bytes memory image) private pure returns (DecodedImage memory) {\\n    ContentBounds memory bounds = ContentBounds({\\n      top: uint8(image[1]),\\n      right: uint8(image[2]),\\n      bottom: uint8(image[3]),\\n      left: uint8(image[4])\\n    });\\n    uint256 width = bounds.right - bounds.left;\\n\\n    uint256 cursor;\\n    Rect[] memory rects = new Rect[]((image.length - 5) / 2);\\n\\n    for (uint256 i = 5; i < image.length; i += 2) {\\n      rects[cursor] = Rect({length: uint8(image[i]), colorIndex: uint8(image[i + 1])});\\n\\n      cursor++;\\n    }\\n    return DecodedImage({bounds: bounds, width: width, rects: rects});\\n  }\\n}\\n\",\"keccak256\":\"0x978eb3f1de879a33cf5636730664c8789b15b524a4ddb97a9e7d58e34edc4b1a\",\"license\":\"GPL-3.0\"},\"contracts/NFTDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title A library used to construct ERC721 token URIs and SVG images\\n\\npragma solidity ^0.8.6;\\n\\nimport {Base64} from \\\"./Base64.sol\\\";\\nimport {MultiPartRLEToSVG} from \\\"./MultiPartRLEToSVG.sol\\\";\\n\\nlibrary NFTDescriptor {\\n  struct TokenURIParams {\\n    string name;\\n    string description;\\n    bytes parts;\\n  }\\n\\n  /**\\n   * @notice Construct an ERC721 token URI.\\n   */\\n  function constructTokenURI(TokenURIParams memory params, string[] storage palette)\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    string memory image = generateSVGImage(\\n      MultiPartRLEToSVG.SVGParams({parts: params.parts, background: palette[0]}),\\n      palette\\n    );\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:application/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              abi.encodePacked(\\n                '{\\\"name\\\":\\\"',\\n                params.name,\\n                '\\\", \\\"description\\\":\\\"',\\n                params.description,\\n                '\\\", \\\"image\\\": \\\"',\\n                \\\"data:image/svg+xml;base64,\\\",\\n                image,\\n                '\\\"}'\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @notice Generate an SVG image for use in the ERC721 token URI.\\n   */\\n  function generateSVGImage(MultiPartRLEToSVG.SVGParams memory params, string[] storage palette)\\n    public\\n    view\\n    returns (string memory svg)\\n  {\\n    return Base64.encode(bytes(MultiPartRLEToSVG.generateSVG(params, palette)));\\n  }\\n}\\n\",\"keccak256\":\"0xecb6e485ac040690b5e860bbbafeadfaf92845a32029e6701ff81af16e03ed3e\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x612074610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80636c2a0e3c14610045578063a94e2b1014610075575b600080fd5b61005f600480360381019061005a9190611418565b6100a5565b60405161006c91906118ba565b60405180910390f35b61008f600480360381019061008a91906113bc565b6101cf565b60405161009c91906118ba565b60405180910390f35b60606000610171604051806040016040528086604001518152602001856000815481106100d5576100d4611c84565b5b9060005260206000200180546100ea90611b4b565b80601f016020809104026020016040519081016040528092919081815260200182805461011690611b4b565b80156101635780601f1061013857610100808354040283529160200191610163565b820191906000526020600020905b81548152906001019060200180831161014657829003601f168201915b5050505050815250846101cf565b90506101a784600001518560200151836040516020016101939392919061176b565b6040516020818303038152906040526101eb565b6040516020016101b791906117d3565b60405160208183030381529060405291505092915050565b60606101e36101de8484610370565b6101eb565b905092915050565b606060008251141561020e5760405180602001604052806000815250905061036b565b6000604051806060016040528060408152602001611fff604091399050600060036002855161023d919061199f565b61024791906119f5565b60046102539190611a26565b90506000602082610264919061199f565b67ffffffffffffffff81111561027d5761027c611cb3565b5b6040519080825280601f01601f1916602001820160405280156102af5781602001600182028036833780820191505090505b509050818152600183018586518101602084015b8183101561032a576003830192508251603f8160121c1685015160f81b8252600182019150603f81600c1c1685015160f81b8252600182019150603f8160061c1685015160f81b8252600182019150603f811685015160f81b8252600182019150506102c3565b60038951066001811461034457600281146103545761035f565b613d3d60f01b600283035261035f565b603d60f81b60018303525b50505050508093505050505b919050565b60608160008154811061038657610385611c84565b5b9060005260206000200161039a84846103c2565b6040516020016103ab9291906117f5565b604051602081830303815290604052905092915050565b606060006040518061042001604052806040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600281526020017f313000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600281526020017f323000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600281526020017f333000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600281526020017f343000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600281526020017f353000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600281526020017f363000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600281526020017f373000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600281526020017f383000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600281526020017f393000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f313030000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f313130000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f313230000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f313330000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f313430000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f313530000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f313630000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f313730000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f313830000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f313930000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f323030000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f323130000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f323230000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f323330000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f323430000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f323530000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f323630000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f323730000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f323830000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f323930000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f333030000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f333130000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f3332300000000000000000000000000000000000000000000000000000000000815250815250905060606000610b7e8660000151610e2e565b9050600081600001516060015160ff169050600082600001516000015160ff169050610ba86110e5565b606060005b856040015151811015610df957600086604001518281518110610bd357610bd2611c84565b5b602002602001015190506000816020015160ff1614610d915788816000015160ff1660218110610c0657610c05611c84565b5b602002015184600060048110610c1f57610c1e611c84565b5b6020020181905250888660218110610c3a57610c39611c84565b5b602002015184600160048110610c5357610c52611c84565b5b6020020181905250888560218110610c6e57610c6d611c84565b5b602002015184600260048110610c8757610c86611c84565b5b60200201819052508a60018260200151610ca19190611ab4565b60ff1681548110610cb557610cb4611c84565b5b906000526020600020018054610cca90611b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054610cf690611b4b565b8015610d435780601f10610d1857610100808354040283529160200191610d43565b820191906000526020600020905b815481529060010190602001808311610d2657829003601f168201915b505050505084600360048110610d5c57610d5b611c84565b5b602002018190525082610d6e85611056565b604051602001610d7f929190611747565b60405160208183030381529060405292505b806000015160ff1686610da4919061199f565b9550866020015187600001516060015160ff1687610dc29190611a80565b1415610de55786600001516060015160ff1695508480610de190611bae565b9550505b508080610df190611bae565b915050610bad565b508581604051602001610e0d929190611747565b60405160208183030381529060405295508597505050505050505092915050565b610e3661110c565b6000604051806080016040528084600181518110610e5757610e56611c84565b5b602001015160f81c60f81b60f81c60ff16815260200184600281518110610e8157610e80611c84565b5b602001015160f81c60f81b60f81c60ff16815260200184600381518110610eab57610eaa611c84565b5b602001015160f81c60f81b60f81c60ff16815260200184600481518110610ed557610ed4611c84565b5b602001015160f81c60f81b60f81c60ff168152509050600081606001518260200151610f019190611ab4565b60ff169050600080600260058751610f199190611a80565b610f2391906119f5565b67ffffffffffffffff811115610f3c57610f3b611cb3565b5b604051908082528060200260200182016040528015610f7557816020015b610f62611133565b815260200190600190039081610f5a5790505b5090506000600590505b865181101561102f576040518060400160405280888381518110610fa657610fa5611c84565b5b602001015160f81c60f81b60f81c60ff16815260200188600184610fca919061199f565b81518110610fdb57610fda611c84565b5b602001015160f81c60f81b60f81c60ff1681525082848151811061100257611001611c84565b5b6020026020010181905250828061101890611bae565b935050600281611028919061199f565b9050610f7f565b50604051806060016040528085815260200184815260200182815250945050505050919050565b60608160006004811061106c5761106b611c84565b5b60200201518260016004811061108557611084611c84565b5b60200201518360026004811061109e5761109d611c84565b5b6020020151846003600481106110b7576110b6611c84565b5b60200201516040516020016110cf9493929190611845565b6040516020818303038152906040529050919050565b60405180608001604052806004905b60608152602001906001900390816110f45790505090565b604051806060016040528061111f611153565b815260200160008152602001606081525090565b6040518060400160405280600060ff168152602001600060ff1681525090565b6040518060800160405280600060ff168152602001600060ff168152602001600060ff168152602001600060ff1681525090565b600061119a61119584611901565b6118dc565b9050828152602081018484840111156111b6576111b5611cf1565b5b6111c1848285611b09565b509392505050565b60006111dc6111d784611932565b6118dc565b9050828152602081018484840111156111f8576111f7611cf1565b5b611203848285611b09565b509392505050565b60008135905061121a81611fe7565b92915050565b600082601f83011261123557611234611ce2565b5b8135611245848260208601611187565b91505092915050565b600082601f83011261126357611262611ce2565b5b81356112738482602086016111c9565b91505092915050565b60006040828403121561129257611291611ce7565b5b61129c60406118dc565b9050600082013567ffffffffffffffff8111156112bc576112bb611cec565b5b6112c884828501611220565b600083015250602082013567ffffffffffffffff8111156112ec576112eb611cec565b5b6112f88482850161124e565b60208301525092915050565b60006060828403121561131a57611319611ce7565b5b61132460606118dc565b9050600082013567ffffffffffffffff81111561134457611343611cec565b5b6113508482850161124e565b600083015250602082013567ffffffffffffffff81111561137457611373611cec565b5b6113808482850161124e565b602083015250604082013567ffffffffffffffff8111156113a4576113a3611cec565b5b6113b084828501611220565b60408301525092915050565b600080604083850312156113d3576113d2611cfb565b5b600083013567ffffffffffffffff8111156113f1576113f0611cf6565b5b6113fd8582860161127c565b925050602061140e8582860161120b565b9150509250929050565b6000806040838503121561142f5761142e611cfb565b5b600083013567ffffffffffffffff81111561144d5761144c611cf6565b5b61145985828601611304565b925050602061146a8582860161120b565b9150509250929050565b600061147f82611978565b6114898185611983565b9350611499818560208601611b18565b6114a281611d00565b840191505092915050565b60006114b882611978565b6114c28185611994565b93506114d2818560208601611b18565b80840191505092915050565b600081546114eb81611b4b565b6114f58186611994565b94506001821660008114611510576001811461152157611554565b60ff19831686528186019350611554565b61152a85611963565b60005b8381101561154c5781548189015260018201915060208101905061152d565b838801955050505b50505092915050565b600061156a600983611994565b915061157582611d11565b600982019050919050565b600061158d600983611994565b915061159882611d3a565b600982019050919050565b60006115b0600483611994565b91506115bb82611d63565b600482019050919050565b60006115d3600283611994565b91506115de82611d8c565b600282019050919050565b60006115f6600d83611994565b915061160182611db5565b600d82019050919050565b6000611619601283611994565b915061162482611dde565b601282019050919050565b600061163c602883611994565b915061164782611e07565b602882019050919050565b600061165f601d83611994565b915061166a82611e56565b601d82019050919050565b6000611682600583611994565b915061168d82611e7f565b600582019050919050565b60006116a5601183611994565b91506116b082611ea8565b601182019050919050565b60006116c8607483611994565b91506116d382611ed1565b607482019050919050565b60006116eb600d83611994565b91506116f682611f6c565b600d82019050919050565b600061170e600683611994565b915061171982611f95565b600682019050919050565b6000611731601a83611994565b915061173c82611fbe565b601a82019050919050565b600061175382856114ad565b915061175f82846114ad565b91508190509392505050565b600061177682611580565b915061178282866114ad565b915061178d8261160c565b915061179982856114ad565b91506117a4826115e9565b91506117af82611724565b91506117bb82846114ad565b91506117c6826115c6565b9150819050949350505050565b60006117de82611652565b91506117ea82846114ad565b915081905092915050565b6000611800826116bb565b915061180b8261162f565b915061181782856114de565b9150611822826115a3565b915061182e82846114ad565b915061183982611701565b91508190509392505050565b6000611850826116de565b915061185c82876114ad565b915061186782611698565b915061187382866114ad565b915061187e82611675565b915061188a82856114ad565b91506118958261155d565b91506118a182846114ad565b91506118ac826115a3565b915081905095945050505050565b600060208201905081810360008301526118d48184611474565b905092915050565b60006118e66118f7565b90506118f28282611b7d565b919050565b6000604051905090565b600067ffffffffffffffff82111561191c5761191b611cb3565b5b61192582611d00565b9050602081019050919050565b600067ffffffffffffffff82111561194d5761194c611cb3565b5b61195682611d00565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006119aa82611af2565b91506119b583611af2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156119ea576119e9611bf7565b5b828201905092915050565b6000611a0082611af2565b9150611a0b83611af2565b925082611a1b57611a1a611c26565b5b828204905092915050565b6000611a3182611af2565b9150611a3c83611af2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611a7557611a74611bf7565b5b828202905092915050565b6000611a8b82611af2565b9150611a9683611af2565b925082821015611aa957611aa8611bf7565b5b828203905092915050565b6000611abf82611afc565b9150611aca83611afc565b925082821015611add57611adc611bf7565b5b828203905092915050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015611b36578082015181840152602081019050611b1b565b83811115611b45576000848401525b50505050565b60006002820490506001821680611b6357607f821691505b60208210811415611b7757611b76611c55565b5b50919050565b611b8682611d00565b810181811067ffffffffffffffff82111715611ba557611ba4611cb3565b5b80604052505050565b6000611bb982611af2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611bec57611beb611bf7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f222066696c6c3d22230000000000000000000000000000000000000000000000600082015250565b7f7b226e616d65223a220000000000000000000000000000000000000000000000600082015250565b7f22202f3e00000000000000000000000000000000000000000000000000000000600082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f222c2022696d616765223a202200000000000000000000000000000000000000600082015250565b7f222c20226465736372697074696f6e223a220000000000000000000000000000600082015250565b7f3c726563742077696474683d223130302522206865696768743d22313030252260008201527f2066696c6c3d2223000000000000000000000000000000000000000000000000602082015250565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b7f2220793d22000000000000000000000000000000000000000000000000000000600082015250565b7f22206865696768743d2231302220783d22000000000000000000000000000000600082015250565b7f3c7376672077696474683d2233323022206865696768743d223332302220766960008201527f6577426f783d2230203020333230203332302220786d6c6e733d22687474703a60208201527f2f2f7777772e77332e6f72672f323030302f737667222073686170652d72656e60408201527f646572696e673d2263726973704564676573223e000000000000000000000000606082015250565b7f3c726563742077696474683d2200000000000000000000000000000000000000600082015250565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000600082015250565b611ff081611ae8565b8114611ffb57600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212207da600b7aff0a8fb136214c79f3b132e59beab07969ed638fca52175930c07f364736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructTokenURI(NFTDescriptor.TokenURIParams,string[] storage)": {
        "notice": "Construct an ERC721 token URI."
      },
      "generateSVGImage(MultiPartRLEToSVG.SVGParams,string[] storage)": {
        "notice": "Generate an SVG image for use in the ERC721 token URI."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}